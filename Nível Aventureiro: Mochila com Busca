#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <stdbool.h>

// Código da Ilha – Edição Free Fire
// Nível: Aventureiro
// Este programa adiciona a funcionalidade de busca sequencial para localizar itens na mochila.
// Foco na prática de comparação de strings (strcmp) e lógica de busca.

// ------------------------------------------------
// Definições de Estruturas e Constantes
// ------------------------------------------------

#define MAX_SLOTS 10 // Capacidade máxima de itens

// Struct Item:
// Representa um componente com nome, tipo e quantidade.
typedef struct {
    char nome[30];
    char tipo[20];
    int quantidade;
} Item;

// ------------------------------------------------
// Variáveis Globais (Vetor mochila e Controles)
// ------------------------------------------------

// Vetor mochila:
// Armazena até 10 itens coletados.
Item mochila[MAX_SLOTS];

// Variáveis de controle:
int numItens = 0; // quantidade atual

// ------------------------------------------------
// Protótipos das Funções
// ------------------------------------------------

void limparBuffer();
void limparTela();
void exibirMenu();
void listarItens();
void inserirItem();
int buscarItemSequencial(const char *nome); // Lógica da busca
void removerItem(); // Remoção pelo nome, usando a busca
void buscarItemPorNome(); // Interface da busca (Novidade)

// ------------------------------------------------
// Implementação das Funções
// ------------------------------------------------

// limparTela():
void limparTela() {
    #ifdef _WIN32
        system("cls");
    #else
        system("clear");
    #endif
}

// limparBuffer():
void limparBuffer() {
    int c;
    while ((c = getchar()) != '\n' && c != EOF) {}
}

// exibirMenu():
// Apresenta o menu principal ao jogador, incluindo a nova opção de busca.
void exibirMenu() {
    printf("\n=========================================\n");
    printf("MOCHILA DE LOOT - NÍVEL AVENTUREIRO\n");
    printf("-----------------------------------------\n");
    printf("1. Adicionar um item\n");
    printf("2. Remover um item pelo Nome\n"); // Mudança para remover pelo Nome
    printf("3. Listar todos os itens\n");
    printf("4. Buscar item por nome\n"); // Nova opção de busca
    printf("0. Sair\n");
    printf("Escolha: ");
}

// listarItens():
// Exibe uma tabela formatada com todos os componentes presentes na mochila.
void listarItens() {
    printf("\n--- Conteúdo da Mochila ---\n");
    printf("------------------------------------------------------\n");

    if (numItens == 0) {
        printf("A mochila está vazia.\n");
        printf("------------------------------------------------------\n");
        return;
    }

    printf("Pos | Nome                      | Tipo            | Qtd\n");
    printf("------------------------------------------------------\n");
    for (int i = 0; i < numItens; i++) {
        Item item = mochila[i];
        printf("%02d  | %-25s | %-15s | %d\n",
               i + 1, item.nome, item.tipo, item.quantidade);
    }
    printf("------------------------------------------------------\n");
}

// inserirItem():
// Adiciona um novo componente à mochila se houver espaço.
void inserirItem() {
    if (numItens >= MAX_SLOTS) {
        printf("\n[ALERTA] Mochila cheia! (%d/%d slots)\n", numItens, MAX_SLOTS);
        return;
    }

    Item novo;
    printf("\n--- Adicionar Item ---\n");

    printf("Nome: ");
    limparBuffer();
    if (fgets(novo.nome, sizeof(novo.nome), stdin) == NULL) return;
    novo.nome[strcspn(novo.nome, "\n")] = 0;

    printf("Tipo (ex: Arma, Cura): ");
    if (scanf("%19s", novo.tipo) != 1) { limparBuffer(); return; }

    printf("Quantidade: ");
    if (scanf("%d", &novo.quantidade) != 1 || novo.quantidade <= 0) {
        printf("[ERRO] Quantidade inválida.\n"); limparBuffer(); return;
    }

    mochila[numItens] = novo;
    numItens++;

    printf("\n[SUCESSO] '%s' adicionado.\n", novo.nome);
    listarItens();
}

// buscarItemSequencial():
// Implementação da busca sequencial por nome.
// Retorna o índice do item, ou -1 se não encontrado.
int buscarItemSequencial(const char *nome) {
    for (int i = 0; i < numItens; i++) {
        // Conceito Adicionado: Comparação de strings (strcmp)
        if (strcmp(mochila[i].nome, nome) == 0) {
            return i;
        }
    }
    return -1;
}

// removerItem():
// Permite remover um componente da mochila pelo nome, utilizando a busca.
void removerItem() {
    char nomeParaRemover[30];
    int indice;

    if (numItens == 0) {
        printf("\nA mochila está vazia. Nada para remover.\n");
        return;
    }

    printf("\n--- Remover Item ---\n");
    printf("Digite o NOME exato do item para remoção: ");
    limparBuffer();
    if (fgets(nomeParaRemover, sizeof(nomeParaRemover), stdin) == NULL) return;
    nomeParaRemover[strcspn(nomeParaRemover, "\n")] = 0;

    // Busca o item para encontrar o índice
    indice = buscarItemSequencial(nomeParaRemover);

    if (indice == -1) {
        printf("\n[ALERTA] Item '%s' não encontrado.\n", nomeParaRemover);
        return;
    }

    char nomeRemovido[30];
    strcpy(nomeRemovido, mochila[indice].nome);

    // Reorganiza o vetor (deslocamento)
    for (int i = indice; i < numItens - 1; i++) {
        mochila[i] = mochila[i + 1];
    }

    numItens--;

    printf("\n[SUCESSO] Item '%s' removido.\n", nomeRemovido);
    listarItens();
}

// buscarItemPorNome():
// Interface que utiliza a busca sequencial e exibe os dados do item encontrado.
void buscarItemPorNome() {
    char nomeParaBuscar[30];
    int indice;

    if (numItens == 0) {
        printf("\nA mochila está vazia. Não há itens para buscar.\n");
        return;
    }

    printf("\n--- Buscar Item por Nome ---\n");
    printf("Qual item você está procurando? ");
    limparBuffer();
    if (fgets(nomeParaBuscar, sizeof(nomeParaBuscar), stdin) == NULL) return;
    nomeParaBuscar[strcspn(nomeParaBuscar, "\n")] = 0;

    indice = buscarItemSequencial(nomeParaBuscar);

    // Saída: Exibição detalhada ou mensagem de erro
    if (indice != -1) {
        Item itemEncontrado = mochila[indice];
        printf("\n[ITEM ENCONTRADO! - POSIÇÃO %d]\n", indice + 1);
        printf("Nome: %s\n", itemEncontrado.nome);
        printf("Tipo: %s\n", itemEncontrado.tipo);
        printf("Quantidade: %d\n", itemEncontrado.quantidade);
    } else {
        printf("\n[NÃO ENCONTRADO] O item '%s' não está na mochila.\n", nomeParaBuscar);
    }
}

// ------------------------------------------------
// Função Principal
// ------------------------------------------------

int main() {
    int escolha;
    
    limparTela();
    printf("**********************************************\n");
    printf("* Código da Ilha – Edição Free Fire (Nível Aventureiro) *\n");
    printf("**********************************************\n");

    // Menu principal com opções:
    // 1. Adicionar um item
    // 2. Remover um item
    // 3. Listar todos os itens
    // 4. Realizar busca sequencial por nome
    // 0. Sair

    do {
        exibirMenu();
        
        if (scanf("%d", &escolha) != 1) {
            printf("\n[ERRO] Opção inválida. Digite um número.\n");
            escolha = -1;
            limparBuffer();
        }

        // A estrutura switch trata cada opção chamando a função correspondente.
        switch (escolha) {
            case 1: inserirItem(); break;
            case 2: removerItem(); break;
            case 3: listarItens(); break;
            case 4: buscarItemPorNome(); break;
            case 0: printf("\nFechando o sistema. Missão concluída (Nível Aventureiro).\n"); break;
            default: printf("\nOpção desconhecida. Tente novamente.\n");
        }
    } while (escolha != 0);

    return 0;
}