#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// ------------------------------------------------
// Constantes e Estrutura de Dados (Funcionalidade: struct e Vetor Estático)
// ------------------------------------------------

// A capacidade máxima da nossa mochila: 10 itens
#define MAX_SLOTS 10

// Estrutura para representar cada item (nome, tipo, quantidade)
typedef struct {
    char nome[30];
    char tipo[20];
    int quantidade;
} Item;

// O vetor de structs (nosso inventário) e o contador
Item inventario[MAX_SLOTS];
int totalItens = 0; // Quantos itens já adicionamos

// ------------------------------------------------
// Funções de Utilidade
// ------------------------------------------------

/**
 * Essencial para evitar erros ao misturar scanf com fgets/leitura de strings.
 */
void limparBuffer() {
    int c;
    while ((c = getchar()) != '\n' && c != EOF) {
        // Apenas consome os caracteres restantes
    }
}

/**
  * (Funcionalidade: Listar os itens cadastrados)
 */
void listarItens() {
    printf("\n--- INVENTÁRIO BÁSICO (%d/%d Slots) ---\n", totalItens, MAX_SLOTS);
    printf("----------------------------------------------\n");

    if (totalItens == 0) {
        printf("A mochila está vazia.\n");
        printf("----------------------------------------------\n");
        return;
    }

    // Saída: Exibe os dados organizados em formato de tabela
    printf("Pos | Nome                      | Tipo            | Qtd\n");
    printf("------------------------------------------------------\n");
    for (int i = 0; i < totalItens; i++) {
        Item item = inventario[i];
        printf("%02d  | %-25s | %-15s | %d\n",
               i + 1, item.nome, item.tipo, item.quantidade);
    }
    printf("------------------------------------------------------\n");
}


/**
 * (Funcionalidade: Adicionar itens)
 */
void adicionarItem() {
    if (totalItens >= MAX_SLOTS) {
        printf("\n[ALERTA] Mochila cheia! (%d/%d slots)\n", totalItens, MAX_SLOTS);
        return;
    }

    Item novo;
    printf("\n--- Adicionar Item ---\n");

    // 1. Leitura do Nome (uso de fgets para robustez)
    printf("Nome do Item (max 29 caracteres): ");
    limparBuffer();
    if (fgets(novo.nome, sizeof(novo.nome), stdin) == NULL) return;
    // Remove o '\n'
    novo.nome[strcspn(novo.nome, "\n")] = 0;

    // 2. Leitura do Tipo
    printf("Tipo do Item (ex: Arma, Cura): ");
    // Usamos scanf com limitador para segurança
    if (scanf("%19s", novo.tipo) != 1) { printf("[ERRO] Falha na leitura do tipo.\n"); return; }


    // 3. Leitura da Quantidade (scanf)
    printf("Quantidade: ");
    if (scanf("%d", &novo.quantidade) != 1 || novo.quantidade <= 0) {
        printf("[ERRO] Quantidade inválida. Item não adicionado.\n");
        limparBuffer();
        return;
    }

    // Coloca o item no vetor e atualiza o contador
    inventario[totalItens] = novo;
    totalItens++;

    printf("\n[SUCESSO] '%s' adicionado.\n", novo.nome);
    listarItens();
}


/**
  * NOTA: Para simplificar (sem buscas especializadas), vamos pedir a Posição.
 * (Funcionalidade: Remover itens pelo nome - Adaptação para simplificação)
 */
void removerItem() {
    int indiceRemover, posicao;

    if (totalItens == 0) {
        printf("\nA mochila está vazia. Nada para remover.\n");
        return;
    }

    listarItens();
    printf("\n--- Remover Item ---\n");
    printf("Digite o NÚMERO da linha do item que deseja remover (Posição 1 a %d): ", totalItens);

    if (scanf("%d", &posicao) != 1) {
        printf("[ERRO] Entrada inválida. Use apenas números.\n");
        limparBuffer();
        return;
    }

    // O índice do vetor é (Posição - 1)
    indiceRemover = posicao - 1;

    // Checa se a posição é válida
    if (indiceRemover < 0 || indiceRemover >= totalItens) {
        printf("[ERRO] Posição %d não é válida. Tente novamente.\n", posicao);
        return;
    }

    // Armazena o nome para feedback
    char nomeRemovido[30];
    strcpy(nomeRemovido, inventario[indiceRemover].nome);

    // Deslocamento de elementos para fechar o espaço
    for (int i = indiceRemover; i < totalItens - 1; i++) {
        inventario[i] = inventario[i + 1];
    }

    totalItens--;

    printf("\n[SUCESSO] Item '%s' (Posição %d) removido.\n", nomeRemovido, posicao);
    listarItens();
}

// ------------------------------------------------
// Fluxo Principal (Funcionalidade: Menu Interativo)
// ------------------------------------------------

int main() {
    int escolha;

    printf("*****************************************\n");
    printf("* INVENTÁRIO BÁSICO (Nível Novato em C) *\n");
    printf("*****************************************\n");

    // Menu interativo com do-while e switch (Funcionalidade)
    do {
        printf("\n=========================================\n");
        printf("MENU\n");
        printf("1. Adicionar Item (Loot)\n");
        printf("2. Remover Item pela Posição\n");
        printf("3. Listar Inventário\n");
        printf("0. Sair\n");
        printf("Escolha: ");

        // Leitura e tratamento básico de erro para a escolha
        if (scanf("%d", &escolha) != 1) {
            printf("\n[ERRO] Opção inválida. Digite um número.\n");
            escolha = -1; // Valor que garante o loop
            limparBuffer();
        }

        printf("=========================================\n");

        switch (escolha) {
            case 1: adicionarItem(); break;
            case 2: removerItem(); break;
            case 3: listarItens(); break;
            case 0: printf("\nFechando o programa. Até mais!\n"); break;
            default: printf("\nOpção desconhecida. Tente novamente.\n");
        }
    } while (escolha != 0);

    return 0;
}